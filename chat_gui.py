#!/usr/bin/env python3
"""
Matrix Chat GUI - –ø—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á–∞—Ç—É
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import sys
import os
import threading
import time
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ core –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.append(os.path.join(os.path.dirname(__file__), 'core'))

from matrix_chat_client import MatrixClient

class MatrixChatGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Matrix Chat")
        self.root.geometry("800x600")
        self.root.minsize(600, 400)
        
        # Matrix –∫–ª—ñ—î–Ω—Ç
        self.matrix_client = None
        self.current_room = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ config.py
        try:
            from config import MATRIX_CONFIG
            self.config = MATRIX_CONFIG
        except ImportError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–§–∞–π–ª config.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            sys.exit(1)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        self.connect_to_matrix()
    
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        
        # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="Matrix Chat", font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_frame = ttk.LabelFrame(main_frame, text="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", padding="5")
        user_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        user_frame.columnconfigure(1, weight=1)
        
        self.user_info_label = ttk.Label(user_frame, text="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ", foreground="red")
        self.user_info_label.grid(row=0, column=0, columnspan=2, sticky=tk.W)
        
        # –°—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        self.status_label = ttk.Label(main_frame, text="–°—Ç–∞—Ç—É—Å: –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ", foreground="red")
        self.status_label.grid(row=2, column=0, columnspan=3, sticky=tk.W, pady=(0, 10))
        
        # –í–∏–±—ñ—Ä –∫—ñ–º–Ω–∞—Ç–∏
        room_frame = ttk.LabelFrame(main_frame, text="–ö—ñ–º–Ω–∞—Ç–∞", padding="5")
        room_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        room_frame.columnconfigure(1, weight=1)
        
        ttk.Label(room_frame, text="–ö—ñ–º–Ω–∞—Ç–∞:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.room_var = tk.StringVar()
        self.room_combo = ttk.Combobox(room_frame, textvariable=self.room_var, state="readonly", width=40)
        self.room_combo.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 5))
        self.room_combo.bind("<<ComboboxSelected>>", self.on_room_selected)
        
        ttk.Button(room_frame, text="–û–Ω–æ–≤–∏—Ç–∏", command=self.refresh_rooms).grid(row=0, column=2)
        
        # –ß–∞—Ç
        chat_frame = ttk.LabelFrame(main_frame, text="–ß–∞—Ç", padding="5")
        chat_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        chat_frame.columnconfigure(0, weight=1)
        chat_frame.rowconfigure(0, weight=1)
        
        # –ü–æ–ª–µ —á–∞—Ç—É (–∑–±—ñ–ª—å—à–µ–Ω–µ) –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        self.chat_text = scrolledtext.ScrolledText(
            chat_frame, 
            height=20, 
            wrap=tk.WORD,
            font=("Consolas", 10),
            bg="#000000",  # –ß–æ—Ä–Ω–∏–π —Ñ–æ–Ω
            fg="#ffffff",  # –ë—ñ–ª–∏–π –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            insertbackground="#ffffff"  # –ë—ñ–ª–∏–π –∫—É—Ä—Å–æ—Ä
        )
        self.chat_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–µ–≥–∏ –¥–ª—è –∫–æ–ª—å–æ—Ä—ñ–≤ (—Ç–µ–º–Ω–∞ —Ç–µ–º–∞)
        self.chat_text.tag_configure("timestamp", foreground="#888888", font=("Consolas", 9))  # –°—ñ—Ä–∏–π —á–∞—Å
        self.chat_text.tag_configure("sender", foreground="#00aaff", font=("Consolas", 10, "bold"))  # –°–∏–Ω—ñ–π –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫
        self.chat_text.tag_configure("message", foreground="#ffffff", font=("Consolas", 10))  # –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
        self.chat_text.tag_configure("system", foreground="#00ff88", font=("Consolas", 9, "italic"))  # –ó–µ–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π
        self.chat_text.tag_configure("error", foreground="#ff4444", font=("Consolas", 9, "bold"))  # –ß–µ—Ä–≤–æ–Ω–∏–π –ø–æ–º–∏–ª–∫–∞
        
        # –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        input_frame = ttk.Frame(chat_frame)
        input_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(5, 0))
        input_frame.columnconfigure(0, weight=1)
        
        self.message_var = tk.StringVar()
        self.message_entry = ttk.Entry(input_frame, textvariable=self.message_var, font=("Consolas", 10))
        self.message_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        self.message_entry.bind("<Return>", self.send_message)
        
        # –°—Ç–∏–ª—ñ–∑—É—î–º–æ –ø–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏
        style = ttk.Style()
        style.configure('Dark.TEntry', fieldbackground='#333333', foreground='#ffffff')
        self.message_entry.configure(style='Dark.TEntry')
        
        ttk.Button(input_frame, text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", command=self.send_message).grid(row=0, column=1)
        
        # –°–µ—Ä–≤—ñ—Å–Ω–µ –ø–æ–ª–µ (–∑–º–µ–Ω—à–µ–Ω–µ)
        service_frame = ttk.LabelFrame(main_frame, text="–°–µ—Ä–≤—ñ—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", padding="5")
        service_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        service_frame.columnconfigure(0, weight=1)
        service_frame.rowconfigure(0, weight=1)
        
        # –°–µ—Ä–≤—ñ—Å–Ω–µ –ø–æ–ª–µ (–∑–º–µ–Ω—à–µ–Ω–µ) –∑ —Ç–µ–º–Ω–æ—é —Ç–µ–º–æ—é
        self.service_text = scrolledtext.ScrolledText(
            service_frame, 
            height=6, 
            wrap=tk.WORD,
            font=("Consolas", 9),
            bg="#1a1a1a",  # –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π —Ñ–æ–Ω
            fg="#cccccc",  # –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ç–µ–∫—Å—Ç
            insertbackground="#ffffff"  # –ë—ñ–ª–∏–π –∫—É—Ä—Å–æ—Ä
        )
        self.service_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=6, column=0, columnspan=3, pady=(10, 0))
        
        ttk.Button(button_frame, text="–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è", command=self.connect_to_matrix).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(button_frame, text="–í—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è", command=self.disconnect_from_matrix).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç", command=self.clear_chat).grid(row=0, column=2, padx=(0, 5))
        ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å", command=self.clear_service).grid(row=0, column=3, padx=(0, 5))
    
    def log_service(self, message):
        """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–µ—Ä–≤—ñ—Å–Ω–µ –ø–æ–ª–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.service_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.service_text.see(tk.END)
    
    def log_chat(self, message):
        """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
        self.chat_text.insert(tk.END, f"{message}\n")
        self.chat_text.see(tk.END)
    
    def update_user_info(self):
        """–û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if self.matrix_client and self.matrix_client.is_authenticated():
            user_id = self.matrix_client.get_user_id()
            if user_id:
                self.user_info_label.config(
                    text=f"üë§ {user_id} | üè† {len(self.matrix_client.get_rooms() or [])} –∫—ñ–º–Ω–∞—Ç",
                    foreground="green"
                )
            else:
                self.user_info_label.config(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ", foreground="blue")
        else:
            self.user_info_label.config(text="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ", foreground="red")
    
    def connect_to_matrix(self):
        """–ü—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ Matrix —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.log_service("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Matrix —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞
            self.matrix_client = MatrixClient(self.config['homeserver'])
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
            if self.matrix_client.login(self.config['username'], self.config['password']):
                self.log_service("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
                self.update_status("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ", "green")
                self.update_user_info()
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–º–Ω–∞—Ç–∏
                self.refresh_rooms()
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
                self.matrix_client.add_message_callback(self.on_new_message)
                if self.matrix_client.start_polling():
                    self.log_service("Polling –∑–∞–ø—É—â–µ–Ω–æ - –æ—á—ñ–∫—É—î–º–æ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
                else:
                    self.log_service("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É polling")
                
            else:
                self.log_service("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó!")
                self.update_status("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", "red")
                
        except Exception as e:
            self.log_service(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", "red")
    
    def disconnect_from_matrix(self):
        """–í—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –≤—ñ–¥ Matrix —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.matrix_client:
            self.matrix_client.logout()
            self.matrix_client = None
            self.update_status("–í—ñ–¥–∫–ª—é—á–µ–Ω–æ", "red")
            self.update_user_info()
            self.log_service("–í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ Matrix —Å–µ—Ä–≤–µ—Ä–∞")
            
            # –û—á–∏—â–∞—î–º–æ –∫—ñ–º–Ω–∞—Ç–∏
            self.room_combo['values'] = []
            self.room_var.set("")
            self.current_room = None
            
            # –û—á–∏—â–∞—î–º–æ —á–∞—Ç
            self.clear_chat()
    
    def refresh_rooms(self):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç"""
        if not self.matrix_client or not self.matrix_client.is_authenticated():
            self.log_service("–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            return
        
        try:
            rooms_info = self.matrix_client.get_rooms_with_names()
            if rooms_info:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–Ω–∞–∑–≤–∞ + ID)
                display_list = []
                self.rooms_dict = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è mapping –Ω–∞–∑–≤–∞ -> ID
                
                for room in rooms_info:
                    display_name = room['display_name']
                    room_id = room['id']
                    display_list.append(display_name)
                    self.rooms_dict[display_name] = room_id
                
                self.room_combo['values'] = display_list
                self.log_service(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(rooms_info)} –∫—ñ–º–Ω–∞—Ç")
                self.update_user_info()
                
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–º–Ω–∞—Ç—É –∑ config
                current_room_id = self.config['room_id']
                for room in rooms_info:
                    if room['id'] == current_room_id:
                        self.room_var.set(room['display_name'])
                        self.on_room_selected()
                        break
                else:
                    # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ –∫—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—É
                    if display_list:
                        self.room_var.set(display_list[0])
                        self.on_room_selected()
            else:
                self.log_service("–ö—ñ–º–Ω–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            self.log_service(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç: {e}")
    
    def on_room_selected(self, event=None):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫—ñ–º–Ω–∞—Ç–∏"""
        display_name = self.room_var.get()
        if not display_name or not hasattr(self, 'rooms_dict'):
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—ñ–º–Ω–∞—Ç–∏ –∑ –Ω–∞–∑–≤–∏
        room_id = self.rooms_dict.get(display_name)
        if not room_id:
            return
        
        self.current_room = room_id
        self.current_room_name = display_name
        self.log_service(f"–í–∏–±—Ä–∞–Ω–æ –∫—ñ–º–Ω–∞—Ç—É: {display_name} ({room_id})")
        
        # –û—á–∏—â–∞—î–º–æ —á–∞—Ç –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.clear_chat()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.load_messages()
    
    def load_messages(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—ñ–º–Ω–∞—Ç–∏"""
        if not self.current_room or not self.matrix_client:
            return
        
        try:
            self.log_service(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫—ñ–º–Ω–∞—Ç–∏ {self.current_room_name}...")
            messages = self.matrix_client.get_messages(self.current_room, limit=20)
            if messages:
                self.log_service(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(messages)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
                for msg in messages:
                    sender = msg.get('sender', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
                    body = msg.get('body', '–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
                    timestamp = msg.get('timestamp', 0)
                    
                    if body and body != '–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è':
                        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å
                        if timestamp:
                            try:
                                dt = datetime.fromtimestamp(timestamp / 1000)
                                time_str = dt.strftime('%H:%M:%S')
                            except:
                                time_str = '–ù–µ–≤—ñ–¥–æ–º–∏–π —á–∞—Å'
                        else:
                            time_str = '–ù–µ–≤—ñ–¥–æ–º–∏–π —á–∞—Å'
                        
                        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                        self.log_chat_formatted(time_str, sender, body)
            else:
                self.log_service("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            self.log_service(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
    
    def log_chat_formatted(self, timestamp, sender, message):
        """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
        self.chat_text.insert(tk.END, f"[{timestamp}] ", "timestamp")
        self.chat_text.insert(tk.END, f"{sender}: ", "sender")
        self.chat_text.insert(tk.END, f"{message}\n", "message")
        self.chat_text.see(tk.END)
    
    def log_chat(self, message):
        """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
        self.chat_text.insert(tk.END, f"{message}\n")
        self.chat_text.see(tk.END)
    
    def send_message(self, event=None):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if not self.current_room or not self.matrix_client:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–º–Ω–∞—Ç—É —Ç–∞ –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            return
        
        message = self.message_var.get().strip()
        if not message:
            return
        
        try:
            if self.matrix_client.send_message(self.current_room, message):
                self.log_service("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                self.message_var.set("")  # –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ
            else:
                self.log_service("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                
        except Exception as e:
            self.log_service(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
    
    def on_new_message(self, message_data):
        """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        room_id = message_data.get('room_id', '')
        sender = message_data.get('sender', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
        body = message_data.get('body', '')
        timestamp = message_data.get('timestamp', 0)
        
        # –õ–æ–≥—É—î–º–æ –≤ —Å–µ—Ä–≤—ñ—Å–Ω–µ –ø–æ–ª–µ
        if timestamp:
            try:
                dt = datetime.fromtimestamp(timestamp / 1000)
                time_str = dt.strftime('%H:%M:%S')
            except:
                time_str = '–ù–µ–≤—ñ–¥–æ–º–∏–π —á–∞—Å'
        else:
            time_str = '–ù–µ–≤—ñ–¥–æ–º–∏–π —á–∞—Å'
        
        self.log_service(f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è [{time_str}] {sender}: {body}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤ —á–∞—Ç—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ø–æ—Ç–æ—á–Ω–∞ –∫—ñ–º–Ω–∞—Ç–∞
        if room_id == self.current_room and body:
            self.log_chat_formatted(time_str, sender, body)
    
    def update_status(self, text, color):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        self.status_label.config(text=f"–°—Ç–∞—Ç—É—Å: {text}", foreground=color)
    
    def clear_chat(self):
        """–û—á–∏—â–∞—î –ø–æ–ª–µ —á–∞—Ç—É"""
        self.chat_text.delete(1.0, tk.END)
        self.log_service("–ß–∞—Ç –æ—á–∏—â–µ–Ω–æ")
    
    def clear_service(self):
        """–û—á–∏—â–∞—î —Å–µ—Ä–≤—ñ—Å–Ω–µ –ø–æ–ª–µ"""
        self.service_text.delete(1.0, tk.END)
    
    def on_closing(self):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if self.matrix_client:
            self.disconnect_from_matrix()
        self.root.destroy()

def main():
    root = tk.Tk()
    app = MatrixChatGUI(root)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    # –ó–∞–ø—É—Å–∫ GUI
    root.mainloop()

if __name__ == "__main__":
    main()
