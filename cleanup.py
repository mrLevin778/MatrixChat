#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É MatrixChat
"""

import os
import shutil

def cleanup_project():
    """–û—á–∏—â–∞—î –ø—Ä–æ–µ–∫—Ç –≤—ñ–¥ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É MatrixChat...")
    
    # –§–∞–π–ª–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    files_to_remove = [
        'core/realtime_client.py',
        'core/connect_realtime.py', 
        'core/messaging_realtime.py',
        'core/main_realtime.py',
        'core/simple_realtime_client.py',
        'test_realtime.py',
        'test_simple_realtime.py',
        'test_polling.py',
        'test_rooms.py',
        'test_specific_room.py',
        'test_chat.py'
    ]
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    dirs_to_remove = []
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ: {file_path}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {file_path}: {e}")
    
    # –í–∏–¥–∞–ª—è—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    for dir_path in dirs_to_remove:
        if os.path.exists(dir_path):
            try:
                shutil.rmtree(dir_path)
                print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {dir_path}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó {dir_path}: {e}")
    
    print("\n‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìÅ –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É:")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    show_project_structure()

def show_project_structure():
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É"""
    
    def print_tree(path, prefix="", is_last=True):
        if not os.path.exists(path):
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        items = []
        for item in os.listdir(path):
            if not item.startswith('.') and item not in ['__pycache__', '.git']:
                items.append(item)
        
        items.sort()
        
        for i, item in enumerate(items):
            item_path = os.path.join(path, item)
            is_last_item = i == len(items) - 1
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–∏–º–≤–æ–ª
            if is_last_item:
                symbol = "‚îî‚îÄ‚îÄ "
                next_prefix = prefix + "    "
            else:
                symbol = "‚îú‚îÄ‚îÄ "
                next_prefix = prefix + "‚îÇ   "
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç
            if os.path.isdir(item_path):
                print(f"{prefix}{symbol}üìÅ {item}/")
                print_tree(item_path, next_prefix, is_last_item)
            else:
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª—É
                if item.endswith('.py'):
                    icon = "üêç"
                elif item.endswith('.md'):
                    icon = "üìù"
                elif item.endswith('.txt'):
                    icon = "üìÑ"
                elif item.endswith('.gitignore'):
                    icon = "üö´"
                else:
                    icon = "üìÑ"
                
                print(f"{prefix}{symbol}{icon} {item}")

    print_tree(".")
    
    print("\nüéØ –û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏:")
    print("   üêç core/matrix_chat_client.py - –æ—Å–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç")
    print("   üêç core/simple_client.py - –±–∞–∑–æ–≤–∏–π HTTP –∫–ª—ñ—î–Ω—Ç")
    print("   üêç chat_gui.py - –≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("   üêç test_matrix_chat.py - —Ç–µ—Å—Ç –∫–ª—ñ—î–Ω—Ç–∞")
    print("   üìù README.md - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è")
    print("   üìÑ requirements.txt - –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ MatrixChat - –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É")
    print("=" * 50)
    
    # –ü–∏—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    response = input("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Ñ–∞–π–ª–∏? (y/N): ").strip().lower()
    
    if response in ['y', 'yes', '—Ç–∞–∫']:
        cleanup_project()
    else:
        print("‚ùå –û—á–∏—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        show_project_structure()

if __name__ == "__main__":
    main()
